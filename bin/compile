#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

#  To read hidden directories and use move with exclusion.
shopt -s dotglob extglob

# Stop execution affter encountering a problem
set -e
unset GIT_DIR

function print() {
  echo "-----> $1"
}

# Taken from https://devcenter.heroku.com/articles/buildpack-api#bin-compile-summary
function export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}
# Taken from https://devcenter.heroku.com/articles/buildpack-api#style
function indent() {
  sed -u 's/^/       /'
}
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}

export_env_dir "$3"

# Create the cache directory if not exist.
mkdir -p $CACHE_DIR

# Get the source dir
if [ -n "$FLUTTER_SOURCE_DIR" ]; then
  SOURCE_DIR=$BUILD_DIR/$FLUTTER_SOURCE_DIR
else
  SOURCE_DIR=$BUILD_DIR
fi
cd "$SOURCE_DIR"

# Get the deploy build
if [ -n "$FLUTTER_DEPLOY_DIR" ]; then
  DEPLOY_DIR=$BUILD_DIR/$FLUTTER_DEPLOY_DIR
else
  DEPLOY_DIR=$BUILD_DIR/public_html
fi

# Find the git tag/branch to get from Flutter repo
if [ -n "$FLUTTER_VERSION" ]; then
  GIT_TAG=$FLUTTER_VERSION
else
  GIT_TAG="stable"
fi

# Restore Flutter SDK from cache
if [ -d "$CACHE_DIR/.flutter" ] && grep -qFx $GIT_TAG "$CACHE_DIR/.flutter-version"; then
  print "Restoring Flutter SDK from CACHE"
  cp -R $CACHE_DIR/.flutter $SOURCE_DIR
else
  print "Installing SDK from Github repository."
  git clone -c advice.detachedHead=false --depth 1 -b $GIT_TAG https://github.com/flutter/flutter.git .flutter --quiet

  if [ "$GIT_TAG" == "stable" ]; then
    print "Running flutter upgrade command"
    .flutter/bin/flutter upgrade --quiet | indent
  fi
fi

# Restore the packages from cache
if [ -d "$CACHE_DIR/.pub-cache" ]; then
  print "Restoring pub.dev dependencies from CACHE"
  cp -R $CACHE_DIR/.pub-cache $SOURCE_DIR
fi

# Create a directory for Dart packages
PUB_CACHE="$SOURCE_DIR/.pub-cache/"
mkdir -p $PUB_CACHE

print "Enabling Web support"
.flutter/bin/flutter config --enable-web --quiet | indent

print "Running flutter clean command."
.flutter/bin/flutter clean --quiet | indent

print "Getting packages from Flutter project"
.flutter/bin/flutter pub get --quiet | indent

PATH="$PATH":"$(pwd)/.flutter/bin/"

if [ -z "$FLUTTER_BUILD" ]; then
  FLUTTER_BUILD="flutter build web --release --quiet"
fi

print "Compiling the project with $FLUTTER_BUILD"
eval $FLUTTER_BUILD | indent

# Saving SDK in Cache
if [ -x .flutter/bin/flutter ]; then
  print "Saving Flutter SDK in Cache"
  rm -rf $CACHE_DIR/.flutter
  rm -rf $CACHE_DIR/.pub-cache

  cp -R $SOURCE_DIR/.flutter $CACHE_DIR/.flutter
  cp -R $SOURCE_DIR/.pub-cache $CACHE_DIR/.pub-cache
  echo $GIT_TAG > $CACHE_DIR/.flutter-version
fi

# Check  FLUTTER_CLEANUP var to delete all files or keep it.
if [ "$FLUTTER_CLEANUP" != false ]; then
  print "Cleaning up Flutter source files and the SDK"

  mkdir -p $SOURCE_DIR/TO_DELETE

  mv !("TO_DELETE"|"build"|"static.json") TO_DELETE
  rm -rf TO_DELETE
fi

print "Moving static files to the deploy dir"
mkdir -p $DEPLOY_DIR
mv $SOURCE_DIR/build/web/* $DEPLOY_DIR
rm -rf $SOURCE_DIR/build

# heroku-buildpac-static compatibility
if [ ! -f $BUILD_DIR/static.json ]; then
  echo "{}" > $BUILD_DIR/static.json
fi

if [ "$FLUTTER_CLEANUP" == false ]; then
  print "Setting up the Dart & Flutter command line tools"

  # Create a profile.d script so that CLI commands are in PATH
  # See https://devcenter.heroku.com/articles/buildpack-api#profile-d-scripts
  mkdir -p $BUILD_DIR/.profile.d
  cat <<EOT >> "$BUILD_DIR/.profile.d/flutter.sh"
export PATH=\$PATH:$SOURCE_DIR/.flutter/bin/
export PATH=\$PATH:$SOURCE_DIR/.flutter/bin/cache/dart-sdk/bin/
export PATH=\$PATH:$SOURCE_DIR/.pub-cache/bin
EOT
fi
